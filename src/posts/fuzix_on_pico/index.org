#+setupfile: ~/.emacs.d/org-templates/level1-slim.org
#+title: FUZIX on the Raspberry Pi Pico: Installing from Arch Linux
#+date: "<2021-03-21 Sun 12:00>"
#+keywords: Raspberry Pi, Raspberry Pi Pico, Arch Linux, FUZIX, UNIX
#+description: The Raspberry Pi Foundation recently released their first microntroller, the Pico. And while the Pico can't run Linux unfortunately, it can give you the pleasure of playing with an old-school UNIX-like system: FUZIX.

* FUZIX on the Raspberry Pi Pico: Installing from Arch Linux
#+attr_html: :class tldr 
#+BEGIN_DIV
[TL;DR]  The Raspberry Pi Foundation recently released their first microntroller, the Pico.
And while the Pico can't run Linux unfortunately, it can give you the pleasure of playing with
an old-school UNIX-like system: FUZIX. This post quickly summarizes how to get FUZIX onto the Pico from
Arch Linux.
#+END_DIV

        #+BEGIN_EXPORT html
<figure>
<img src="../../assets/fuzix_pico.jpg" alt="FUZIX on the Pico" title="FUZIX on the Pico" width="650px">

<figcaption><span class="figure-number">Figure 1: </span>FUZIX on the Pico together with some of the most important system tools</figcaption>
</figure>
     #+END_EXPORT       

** Why?

   If you're unsure why you would want to waste your precious time with installing an old-school UNIX-clone on
   a dual-core Cortex M0+ and 264KB RAM beast, let me convince you with my flawless reasoning:

   *1. Why not?*

   *2. Because we can.*

   *3. And as someone suffering from Obsessive Compulsive UNIX-itis: every device needs UNIX because it needs UNIX.*

** How?

   Shortly after the Pico's release, David Given ported FUZIX to it, you'll find details [[http://cowlark.com/2021-02-16-fuzix-pi-pico/][here]].
   And Alasdair Allan wrote an excellent guide on getting FUZIX onto the Pico [[https://www.raspberrypi.org/blog/how-to-get-started-with-fuzix-on-raspberry-pi-pico/][here]].

   So this blog post is just a quick summary of the necessary steps when installing from Arch Linux.

   /(= basically the steps that differ a bit from the guide/datasheet)/
   
   You know, to save you the 15min you'd need to look for and read through the respective Arch Wiki entries yourself...

*** 1. Set up the C/C++ SDK

   Assuming you build FUZIX from source, you'll need a working Pico toolchain.

   The first steps are identical to the description in the [[https://datasheets.raspberrypi.org/pico/getting-started-with-pico.pdf][Pico Datasheet]] in section 2.:
   
   Create a folder for your Pico stuff, in that folder clone the [[https://github.com/raspberrypi/pico-sdk.git][Pico SDK repo]] and the [[https://github.com/raspberrypi/pico-examples.git][examples]].

   Next install the toolchain: you'll need cmake as build system and the GNU
   Embedded Toolchain for arm.

   #+BEGIN_SRC shell
sudo pacman -S cmake arm-none-eabi-gcc arm-none-eabi-newlib base-devel
   #+END_SRC

   /(Pretty sure you already have base-devel, but just in case ;))/

   You can test whether or not everything is setup properly by building the
   Blink example (see [[https://datasheets.raspberrypi.org/pico/getting-started-with-pico.pdf][Pico Datasheet]] for detailed build instructions).

   To load it onto the Pico from the command line:

   Connect your Pico to your computer via USB cable (hold the BOOTSEL button while doing so),
   get its file path for example with

   #+BEGIN_SRC shell
lsblk
   #+END_SRC

   (and then identifying the Pico either by its size or by unplugging and re-plugging
   and comparing the output)

   or with 

      #+BEGIN_SRC shell
dmesg | tail
   #+END_SRC

   Create a mountpoint for the pico, mount it and copy blink.uf2 onto the Pico,
   unmount it when you're done:

   #+BEGIN_SRC shell
     sudo mkdir /mnt/pico
     sudo mount /dev/wherever_your_pico_is /mnt/pico
     sudo cp blink.uf2 /mnt/pico
     sudo sync
     sudo umount /mnt/pico
   #+END_SRC

*** 2. Get FUZIX onto the Pico

   From now on you can happily follow the steps from [[https://www.raspberrypi.org/blog/how-to-get-started-with-fuzix-on-raspberry-pi-pico/][Alasdair Allan's blog post]], until
   you reach the /"connecting via UART"/ part:

   You can choose from a number of options to make a connection, I used /minicom/:

   #+BEGIN_SRC shell
     sudo pacman -S minicom
   #+END_SRC

   To be able to make a connection without being /root/ you'll have to add
   your user to the /uucp/ group:

   #+BEGIN_SRC shell
     sudo gpasswd -a your_username uucp
   #+END_SRC

   Plug in your Pico and your USB UART connector and find your Pico again as previously
   described with /dmesg | tail/.

   In my case it's /dev/ttyUSB0/, so fire up /minicom/ with baudrate 115200:

   #+BEGIN_SRC shell
     minicom -b 115200 -o -D /dev/ttyUSB0
   #+END_SRC

   /(Have a look at the [[https://wiki.archlinux.org/index.php/working_with_the_serial_console][Arch Linux wiki]] for more information)/
   
   Unplug and plug your Pico to see the FUZIX startup message.
   
   Then type CTRL-A O to open the minicom settings, navigate to /Serial port setup/ and disable
   /Hardware Flow Control/.

   You're now able to type commands. Set the date and time, use /root/ without password to login
   and enjoy ;)

   /(The most important part of the system can be found under /usr/games)/
   

   
   
